Вітаю, мені потрбіно написати невеликий веб-сайт, імовірно на Python. Бажано щоб робота була максимально простою та легкою для написання, але все ж з функціоналом. Для початку я б хотів визначитися із самою структурою, самою логікою сайту.

Потрібно зробити сайт фотоальбом. 
Мінімальні вимоги:
1. Реєстрація та авторизація користувачів щоб бачити тільки свої фото;
2. Головна сторінка яка розповідає про сервіс (доступна всім користувачам) і сторінка фотоальбом (тільки для зареєстрованих користувачів);
3. Можливість загружати фото;
4. Можливість створювати папки для групування фотографій (також можна створювати папки в папках);
5. Загружені фото зберігати в хмарі (наприклад s3).


-----------------------------------------------------------

структура файлів виглядає ось так на даний момент:

photo_album/
│── app.py              # Головний файл програми
│── config.py           # Налаштування
│── requirements.txt    # Залежності
│── templates/          # HTML-файли
│   ├── base.html
│   ├── index.html
│   ├── login.html
│   ├── dashboard.html
│── static/             # CSS, JS, зображення
│── models.py           # Опис БД
│── routes.py           # Маршрути сайту
│── auth.py             # Аутентифікація
│── database.py         # Підключення до БД

-----------------------------------------------------------

Ось так виглядають файли .py на даний момент:

### config.py
from os import environ
import os

class Config:
    SECRET_KEY = environ.get('SECRET_KEY') or 'your_secret_key_here'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///site.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    UPLOAD_FOLDER = 'uploads'
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB
    os.makedirs(UPLOAD_FOLDER, exist_ok=True)

### models.py
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from werkzeug.security import generate_password_hash

db = SQLAlchemy()

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(256), nullable=False)

    def set_password(self, password):
        self.password = generate_password_hash(password)

class Photo(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(256), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    folder_id = db.Column(db.Integer, db.ForeignKey('folder.id'), nullable=True)

class Folder(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(150), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    parent_id = db.Column(db.Integer, db.ForeignKey('folder.id'), nullable=True)

### database.py
from flask import Flask
from config import Config
from models import db

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    db.init_app(app)
    
    with app.app_context():
        db.create_all()
    
    return app

### app.py
from database import create_app
from auth import auth_bp
from routes import routes_bp

app = create_app()

app.register_blueprint(auth_bp, url_prefix='/auth')
app.register_blueprint(routes_bp)

if __name__ == '__main__':
    app.run(debug=True)

### routes.py
import os
from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_required, current_user
from werkzeug.utils import secure_filename
from config import Config
from models import db, Photo, Folder

routes_bp = Blueprint('routes', __name__)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in Config.ALLOWED_EXTENSIONS

@routes_bp.route('/')
def index():
    return render_template('index.html')

@routes_bp.route('/album')
@login_required
def album():
    folders = Folder.query.filter_by(user_id=current_user.id).all()
    photos = Photo.query.filter_by(user_id=current_user.id).all()
    return render_template('album.html', folders=folders, photos=photos)

@routes_bp.route('/upload', methods=['POST'])
@login_required
def upload_photo():
    if 'file' not in request.files:
        flash('Файл не завантажено', 'danger')
        return redirect(url_for('routes.album'))
    file = request.files['file']
    if file.filename == '':
        flash('Файл не вибрано', 'danger')
        return redirect(url_for('routes.album'))
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.join(Config.UPLOAD_FOLDER, filename)
        file.save(filepath)
        new_photo = Photo(filename=filename, user_id=current_user.id)
        db.session.add(new_photo)
        db.session.commit()
        flash('Фото успішно завантажене!', 'success')
    else:
        flash('Неприпустимий формат файлу', 'danger')
    return redirect(url_for('routes.album'))

@routes_bp.route('/create_folder', methods=['POST'])
@login_required
def create_folder():
    folder_name = request.form.get('folder_name')
    parent_id = request.form.get('parent_id')
    new_folder = Folder(name=folder_name, user_id=current_user.id, parent_id=parent_id)
    db.session.add(new_folder)
    db.session.commit()
    flash('Папка створена!', 'success')
    return redirect(url_for('routes.album'))

### auth.py
from flask import Blueprint, render_template, redirect, url_for, flash, request
from werkzeug.security import check_password_hash
from flask_login import login_user, logout_user, login_required
from models import db, User

auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        if User.query.filter_by(username=username).first():
            flash('Користувач з таким ім'ям вже існує.', 'danger')
            return redirect(url_for('auth.register'))
        
        new_user = User(username=username)
        new_user.set_password(password)
        db.session.add(new_user)
        db.session.commit()
        login_user(new_user)
        return redirect(url_for('routes.album'))
    
    return render_template('register.html')

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        user = User.query.filter_by(username=username).first()
        
        if not user or not check_password_hash(user.password, password):
            flash('Невірні дані для входу.', 'danger')
            return redirect(url_for('auth.login'))
        
        login_user(user)
        return redirect(url_for('routes.album'))
    
    return render_template('login.html')

@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('routes.index'))


-----------------------------------------------------------

Ось так виглядають файли HTML на даний момент:

<!-- layout.html -->
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Фотоальбом{% endblock %}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">Фотоальбом</a>
            <div class="collapse navbar-collapse">
                <ul class="navbar-nav ms-auto">
                    {% if current_user.is_authenticated %}
                        <li class="nav-item"><a class="nav-link" href="/album">Мій альбом</a></li>
                        <li class="nav-item"><a class="nav-link" href="/auth/logout">Вийти</a></li>
                    {% else %}
                        <li class="nav-item"><a class="nav-link" href="/auth/login">Вхід</a></li>
                        <li class="nav-item"><a class="nav-link" href="/auth/register">Реєстрація</a></li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>
    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>
</body>
</html>

<!-- index.html -->
{% extends "layout.html" %}
{% block title %}Головна{% endblock %}
{% block content %}
    <h1>Ласкаво просимо у фотоальбом!</h1>
    <p><a href="/album" class="btn btn-primary">Перейти до альбому</a></p>
{% endblock %}

<!-- register.html -->
{% extends "layout.html" %}
{% block title %}Реєстрація{% endblock %}
{% block content %}
    <h2>Реєстрація</h2>
    <form method="post">
        <input type="text" name="username" placeholder="Логін" required>
        <input type="password" name="password" placeholder="Пароль" required>
        <button type="submit">Зареєструватися</button>
    </form>
{% endblock %}

<!-- login.html -->
{% extends "layout.html" %}
{% block title %}Вхід{% endblock %}
{% block content %}
    <h2>Вхід</h2>
    <form method="post">
        <input type="text" name="username" placeholder="Логін" required>
        <input type="password" name="password" placeholder="Пароль" required>
        <button type="submit">Увійти</button>
    </form>
{% endblock %}

<!-- album.html -->
{% extends "layout.html" %}
{% block title %}Мій альбом{% endblock %}
{% block content %}
    <h2>Ваш фотоальбом</h2>
    <form action="/upload" method="post" enctype="multipart/form-data">
        <input type="file" name="file" required>
        <button type="submit">Завантажити</button>
    </form>
    <h3>Фото</h3>
    <ul>
        {% for photo in photos %}
            <li><img src="/uploads/{{ photo.filename }}" width="200"></li>
        {% endfor %}
    </ul>
{% endblock %}


-----------------------------------------------------------

Дебагінг починається зі слів
* Running on http://127.0.0.1:5000

При спробі перейти виводить ось це

UndefinedError

jinja2.exceptions.UndefinedError: 'current_user' is undefined
Traceback (most recent call last)

    File "C:\Program Files\Python38\lib\site-packages\flask\app.py", line 2548, in __call__

    return self.wsgi_app(environ, start_response)

    File "C:\Program Files\Python38\lib\site-packages\flask\app.py", line 2528, in wsgi_app

    response = self.handle_exception(e)

    File "C:\Program Files\Python38\lib\site-packages\flask\app.py", line 2525, in wsgi_app

    response = self.full_dispatch_request()

    File "C:\Program Files\Python38\lib\site-packages\flask\app.py", line 1822, in full_dispatch_request

    rv = self.handle_user_exception(e)

    File "C:\Program Files\Python38\lib\site-packages\flask\app.py", line 1820, in full_dispatch_request

    rv = self.dispatch_request()

    File "C:\Program Files\Python38\lib\site-packages\flask\app.py", line 1796, in dispatch_request

    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)

    File "X:\PNU\E-Logic\Project\routes.py", line 15, in index

    return render_template('index.html')

    File "C:\Program Files\Python38\lib\site-packages\flask\templating.py", line 147, in render_template

    return _render(app, template, context)

    File "C:\Program Files\Python38\lib\site-packages\flask\templating.py", line 130, in _render

    rv = template.render(context)

    File "C:\Program Files\Python38\lib\site-packages\jinja2\environment.py", line 1301, in render

    self.environment.handle_exception()

    File "C:\Program Files\Python38\lib\site-packages\jinja2\environment.py", line 936, in handle_exception

    raise rewrite_traceback_stack(source=source)

    File "X:\PNU\E-Logic\Project\templates\index.html", line 1, in top-level template code

    {% extends "layout.html" %}

    File "X:\PNU\E-Logic\Project\templates\layout.html", line 15, in top-level template code

    {% if current_user.is_authenticated %}

    File "C:\Program Files\Python38\lib\site-packages\jinja2\environment.py", line 485, in getattr

    return getattr(obj, attribute)

    jinja2.exceptions.UndefinedError: 'current_user' is undefined

The debugger caught an exception in your WSGI application. You can now look at the traceback which led to the error.

To switch between the interactive traceback and the plaintext one, you can click on the "Traceback" headline. From the text traceback you can also create a paste of it. For code execution mouse-over the frame you want to debug and click on the console icon on the right side.

You can execute arbitrary Python code in the stack frames and there are some extra helpers available for introspection:

    dump() shows all variables in the frame
    dump(obj) dumps all that's known about the object



-----------------------------------------------------------

Між файлами щось справді не так і мені варто якось виправити те все.

-----------------------------------------------------------

Як яке моє бачення роботи сайту, як воно має бути:

незареєстрований користувач бачить головну сторінку та кнопку реєстрації
незареєстрований користувач бачить кнопку завантаження своїх фото і ті фото які завантажив, але тільки він їх бачить
незареєстрований користувач має можливість створювати папки для групування фотографій


-----------------------------------------------------------



-----------------------------------------------------------